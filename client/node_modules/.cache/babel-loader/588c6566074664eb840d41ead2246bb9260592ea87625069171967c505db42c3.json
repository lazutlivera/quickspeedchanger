{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nexport const processYouTubeUrl = async url => {\n  try {\n    // First test if server is running\n    try {\n      const testResponse = await axios.get('http://localhost:5000/test');\n      console.log('Server test response:', testResponse.data);\n    } catch (testError) {\n      console.error('Server test failed:', testError);\n      throw new Error('Cannot connect to server. Is it running?');\n    }\n    console.log('Sending request to server...');\n    const response = await axios.post(`${API_BASE_URL}/audio/process`, {\n      url\n    }, {\n      responseType: 'blob',\n      timeout: 60000,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      onDownloadProgress: progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        console.log(`Download Progress: ${percentCompleted}%`);\n      }\n    });\n    console.log('Response received:', response.status);\n    return URL.createObjectURL(new Blob([response.data]));\n  } catch (error) {\n    console.error('Detailed API Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Server connection timed out. Is the server running?');\n    }\n    if (error.response) {\n      throw new Error(error.response.data.error || 'Server error occurred');\n    }\n    throw new Error('Cannot connect to server. Please check if it\\'s running.');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","processYouTubeUrl","url","testResponse","get","console","log","data","testError","error","Error","response","post","responseType","timeout","headers","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","status","URL","createObjectURL","Blob","code"],"sources":["/home/lazutlivera/musicapp/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nexport const processYouTubeUrl = async (url) => {\n  try {\n    // First test if server is running\n    try {\n      const testResponse = await axios.get('http://localhost:5000/test');\n      console.log('Server test response:', testResponse.data);\n    } catch (testError) {\n      console.error('Server test failed:', testError);\n      throw new Error('Cannot connect to server. Is it running?');\n    }\n\n    console.log('Sending request to server...');\n    const response = await axios.post(\n      `${API_BASE_URL}/audio/process`,\n      { url },\n      {\n        responseType: 'blob',\n        timeout: 60000,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        onDownloadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          console.log(`Download Progress: ${percentCompleted}%`);\n        },\n      }\n    );\n\n    console.log('Response received:', response.status);\n    return URL.createObjectURL(new Blob([response.data]));\n  } catch (error) {\n    console.error('Detailed API Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Server connection timed out. Is the server running?');\n    }\n    if (error.response) {\n      throw new Error(error.response.data.error || 'Server error occurred');\n    }\n    throw new Error('Cannot connect to server. Please check if it\\'s running.');\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,GAAG,IAAK;EAC9C,IAAI;IACF;IACA,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,4BAA4B,CAAC;MAClEC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,YAAY,CAACI,IAAI,CAAC;IACzD,CAAC,CAAC,OAAOC,SAAS,EAAE;MAClBH,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAED,SAAS,CAAC;MAC/C,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IAEAL,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,MAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAC/B,GAAGZ,YAAY,gBAAgB,EAC/B;MAAEE;IAAI,CAAC,EACP;MACEW,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,kBAAkB,EAAGC,aAAa,IAAK;QACrC,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;QACvFjB,OAAO,CAACC,GAAG,CAAC,sBAAsBY,gBAAgB,GAAG,CAAC;MACxD;IACF,CACF,CAAC;IAEDb,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,QAAQ,CAACY,MAAM,CAAC;IAClD,OAAOC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACf,QAAQ,CAACJ,IAAI,CAAC,CAAC,CAAC;EACvD,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,IAAIA,KAAK,CAACkB,IAAI,KAAK,cAAc,EAAE;MACjC,MAAM,IAAIjB,KAAK,CAAC,qDAAqD,CAAC;IACxE;IACA,IAAID,KAAK,CAACE,QAAQ,EAAE;MAClB,MAAM,IAAID,KAAK,CAACD,KAAK,CAACE,QAAQ,CAACJ,IAAI,CAACE,KAAK,IAAI,uBAAuB,CAAC;IACvE;IACA,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;EAC7E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}