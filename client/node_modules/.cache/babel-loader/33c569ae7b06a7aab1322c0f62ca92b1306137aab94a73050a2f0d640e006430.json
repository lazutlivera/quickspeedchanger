{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nexport const processYouTubeUrl = async url => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/audio/process`, {\n      url\n    }, {\n      responseType: 'blob',\n      timeout: 120000,\n      // Increase to 2 minutes\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity\n    });\n    if (response.status !== 200) {\n      throw new Error('Failed to process YouTube URL');\n    }\n    return URL.createObjectURL(response.data);\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. The video might be too large or unavailable.');\n    }\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to process YouTube URL. Please check the URL and try again.');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","processYouTubeUrl","url","response","post","responseType","timeout","maxContentLength","Infinity","maxBodyLength","status","Error","URL","createObjectURL","data","error","_error$response","_error$response$data","console","code"],"sources":["/home/lazutlivera/musicapp/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nexport const processYouTubeUrl = async (url) => {\n  try {\n    const response = await axios.post(\n      `${API_BASE_URL}/audio/process`, \n      { url }, \n      {\n        responseType: 'blob',\n        timeout: 120000, // Increase to 2 minutes\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity\n      }\n    );\n    \n    if (response.status !== 200) {\n      throw new Error('Failed to process YouTube URL');\n    }\n    \n    return URL.createObjectURL(response.data);\n  } catch (error) {\n    console.error('API Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. The video might be too large or unavailable.');\n    }\n    throw new Error(\n      error.response?.data?.error || \n      'Failed to process YouTube URL. Please check the URL and try again.'\n    );\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,GAAG,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAC/B,GAAGJ,YAAY,gBAAgB,EAC/B;MAAEE;IAAI,CAAC,EACP;MACEG,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,MAAM;MAAE;MACjBC,gBAAgB,EAAEC,QAAQ;MAC1BC,aAAa,EAAED;IACjB,CACF,CAAC;IAED,IAAIL,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClD;IAEA,OAAOC,GAAG,CAACC,eAAe,CAACV,QAAQ,CAACW,IAAI,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdC,OAAO,CAACH,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,IAAIA,KAAK,CAACI,IAAI,KAAK,cAAc,EAAE;MACjC,MAAM,IAAIR,KAAK,CAAC,iEAAiE,CAAC;IACpF;IACA,MAAM,IAAIA,KAAK,CACb,EAAAK,eAAA,GAAAD,KAAK,CAACZ,QAAQ,cAAAa,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAC3B,oEACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}