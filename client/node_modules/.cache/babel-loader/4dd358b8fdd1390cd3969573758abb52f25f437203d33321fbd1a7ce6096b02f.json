{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nexport const processYouTubeUrl = async url => {\n  try {\n    console.log('Making request to server...');\n    const response = await axios.post(`${API_BASE_URL}/audio/process`, {\n      url\n    }, {\n      responseType: 'blob',\n      timeout: 300000,\n      // 5 minutes\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n      onDownloadProgress: progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        console.log(`Download Progress: ${percentCompleted}%`);\n      }\n    });\n    if (response.status !== 200) {\n      throw new Error('Failed to process YouTube URL');\n    }\n    console.log('Response received, creating blob URL...');\n    const blob = new Blob([response.data], {\n      type: response.headers['content-type']\n    });\n    return URL.createObjectURL(blob);\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. The video might be too large or unavailable.');\n    }\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to process YouTube URL. Please check the URL and try again.');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","processYouTubeUrl","url","console","log","response","post","responseType","timeout","maxContentLength","Infinity","maxBodyLength","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","status","Error","blob","Blob","data","type","headers","URL","createObjectURL","error","_error$response","_error$response$data","code"],"sources":["/home/lazutlivera/musicapp/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nexport const processYouTubeUrl = async (url) => {\n  try {\n    console.log('Making request to server...');\n    const response = await axios.post(\n      `${API_BASE_URL}/audio/process`, \n      { url }, \n      {\n        responseType: 'blob',\n        timeout: 300000, // 5 minutes\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n        onDownloadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          console.log(`Download Progress: ${percentCompleted}%`);\n        }\n      }\n    );\n    \n    if (response.status !== 200) {\n      throw new Error('Failed to process YouTube URL');\n    }\n    \n    console.log('Response received, creating blob URL...');\n    const blob = new Blob([response.data], { type: response.headers['content-type'] });\n    return URL.createObjectURL(blob);\n  } catch (error) {\n    console.error('API Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. The video might be too large or unavailable.');\n    }\n    throw new Error(\n      error.response?.data?.error || \n      'Failed to process YouTube URL. Please check the URL and try again.'\n    );\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,GAAG,IAAK;EAC9C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAC/B,GAAGN,YAAY,gBAAgB,EAC/B;MAAEE;IAAI,CAAC,EACP;MACEK,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,MAAM;MAAE;MACjBC,gBAAgB,EAAEC,QAAQ;MAC1BC,aAAa,EAAED,QAAQ;MACvBE,kBAAkB,EAAGC,aAAa,IAAK;QACrC,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;QACvFf,OAAO,CAACC,GAAG,CAAC,sBAAsBU,gBAAgB,GAAG,CAAC;MACxD;IACF,CACF,CAAC;IAED,IAAIT,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClD;IAEAjB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtD,MAAMiB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACjB,QAAQ,CAACkB,IAAI,CAAC,EAAE;MAAEC,IAAI,EAAEnB,QAAQ,CAACoB,OAAO,CAAC,cAAc;IAAE,CAAC,CAAC;IAClF,OAAOC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;EAClC,CAAC,CAAC,OAAOO,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd3B,OAAO,CAACyB,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,IAAIA,KAAK,CAACG,IAAI,KAAK,cAAc,EAAE;MACjC,MAAM,IAAIX,KAAK,CAAC,iEAAiE,CAAC;IACpF;IACA,MAAM,IAAIA,KAAK,CACb,EAAAS,eAAA,GAAAD,KAAK,CAACvB,QAAQ,cAAAwB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBN,IAAI,cAAAO,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAC3B,oEACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}